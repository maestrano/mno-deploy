---

- name: PwC Bond | Install packages
  apt: "name={{ item }} state=present update_cache=yes"
  with_items:
    - curl
    - libcurl3
    - libcurl3-gnutls
    - libcurl4-openssl-dev
    - libmysqlclient-dev
    - libsqlite3-dev
    - libpq-dev
    - python-psycopg2
    - postgresql-client
    - nodejs
  when: ansible_os_family == "Debian"

- name: PwC Bond | Install packages
  yum: "name={{ item }} state=present update_cache=yes"
  with_items:
    - curl
    - nodejs
  when: ansible_os_family == "RedHat"

- name: PwC Bond | Create deployment user
  user: name=deployer comment="Application deployment user"

- name: PwC Bond | Add deployer user to sudoers
  lineinfile: dest=/etc/sudoers regexp="deployer ALL" line="deployer ALL=(ALL) NOPASSWD:ALL" state=present

- name: PwC Bond | Create deployment directory
  file: path={{deploy_directory}} owner=deployer group=deployer state=directory

- name: PwC Bond | Make shared directories
  file: path={{deploy_directory}}/shared/{{item}} group=deployer owner=deployer state=directory
  with_items:
    - tmp
    - log
    - public
    - bundle
    - bin
    - config
    - pids
    - sockets
    - vendor_bundle
    - assets
    - styles
    - scripts

- name: PwC Bond | Install bundler
  command: gem install bundler

- name: PwC Bond | Install puma
  command: gem install puma
  when: bond_config.component is defined and bond_config.component == 'web'

- include: sidekiq_deb.yml
  when: ansible_os_family == "Debian" and bond_config.component is defined and bond_config.component == 'jobs'

- include: puma_deb.yml
  when: ansible_os_family == "Debian" and bond_config.component is defined and bond_config.component == 'web'

- include: puma_rhel.yml
  when: ansible_os_family == "RedHat" and bond_config.component is defined and bond_config.component == 'web'

- name: PwC Bond | Copy puma.rb config
  template: src=puma.rb dest={{deploy_directory}}/shared/config/puma.rb owner=deployer group=deployer mode=0755
  when: bond_config.component is defined and bond_config.component == 'web'

- name: Frontend App | Nginx default site deactivation
  file: path=/etc/nginx/sites-enabled/default.conf state=absent
  when: bond_config.component is defined and bond_config.component == 'web'

- name: Frontend App | Nginx site configuration
  template: "src=etc-nginx-bond dest=/etc/nginx/sites-available/{{ bond_project }}"
  register: nginxconfig
  when: bond_config.component is defined and bond_config.component == 'web'

- name: Frontend App | Nginx certificates directory
  file: path=/etc/nginx/certificates state=directory
  when: ssl_internal_cert is defined and ssl_internal_key is defined and bond_config.component is defined and bond_config.component == 'web'

- name: Frontend App | Nginx SSL Certificate
  template: "src=etc-nginx-bond-ssl-cert dest=/etc/nginx/certificates/{{ bond_project }}.crt"
  register: nginxsslcert
  when: ssl_internal_cert is defined and ssl_internal_key is defined and bond_config.component is defined and bond_config.component == 'web'

- name: Frontend App | Nginx SSL Certificate Key
  template: "src=etc-nginx-bond-ssl-key dest=/etc/nginx/certificates/{{ bond_project }}.key"
  register: nginxsslkey
  when: ssl_internal_cert is defined and ssl_internal_key is defined and bond_config.component is defined and bond_config.component == 'web'

- name: Frontend App | Nginx site activation
  file:
    src: "/etc/nginx/sites-available/{{ bond_project }}"
    dest: "/etc/nginx/sites-enabled/{{ bond_project }}"
    state: link
    force: yes
  when: bond_config.component is defined and bond_config.component == 'web'

- name: PwC Bond | Nginx restart
  shell: service nginx restart
  when: nginxconfig.changed or (nginxsslcert is defined and nginxsslcert.changed) or (nginxsslkey is defined and nginxsslkey.changed) and bond_config.component is defined and bond_config.component == 'web'

- name: PwC Bond | Configure splunk forwarder inputs
  shell: "/opt/splunkforwarder/bin/splunk add monitor {{ item.monitor }} -index {{ item.index }} -hostname {{ ansible_hostname }} -auth {{ splunk.username }}:{{ splunk.password }}"
  when: not splunk.skip
  with_items: "{{ splunk.mno_enterprise.inputs }}"
  tags: [splunk-configure]
  ignore_errors: true
